-- -- ============================================================================
-- -- FLOATING TERMINAL
-- -- ============================================================================
--
-- local M = {}
--
-- -- terminal
-- M.terminal_state = {
--   buf = nil,
--   win = nil,
--   is_open = false
-- }
--
-- function M.FloatingTerminal()
--   -- If terminal is already open, close it (toggle behavior)
--   if M.terminal_state.is_open and vim.api.nvim_win_is_valid(M.terminal_state.win) then
--     vim.api.nvim_win_close(M.terminal_state.win, false)
--     M.terminal_state.is_open = false
--     return
--   end
--
--   -- Create buffer if it doesn't exist or is invalid
--   if not M.terminal_state.buf or not vim.api.nvim_buf_is_valid(M.terminal_state.buf) then
--     M.terminal_state.buf = vim.api.nvim_create_buf(false, true)
--     -- Set buffer options for better terminal experience
--     vim.api.nvim_buf_set_option(M.terminal_state.buf, 'bufhidden', 'hide')
--   end
--
--   -- Calculate window dimensions
--   local width = math.floor(vim.o.columns * 1)
--   local height = math.floor(vim.o.lines * 1)
--   local row = math.floor((vim.o.lines - height) / 2)
--   local col = math.floor((vim.o.columns - width) / 2)
--
--   -- Create the floating window
--   M.terminal_state.win = vim.api.nvim_open_win(M.terminal_state.buf, true, {
--     relative = 'editor',
--     width = width,
--     height = height,
--     row = row,
--     col = col,
--     -- style = 'minimal',
--     -- border = 'rounded',
--   })
--
--   -- Set transparency for the floating window
--   vim.api.nvim_win_set_option(M.terminal_state.win, 'winblend', 0)
--
--   -- Set transparent background for the window
--   vim.api.nvim_win_set_option(M.terminal_state.win, 'winhighlight',
--     'Normal:FloatingTermNormal,FloatBorder:FloatingTermBorder')
--
--   -- Define highlight groups for transparency
--   vim.api.nvim_set_hl(0, "FloatingTermNormal", { bg = "none" })
--   vim.api.nvim_set_hl(0, "FloatingTermBorder", { bg = "none", })
--
--   -- Start terminal if not already running
--   local has_terminal = false
--   local lines = vim.api.nvim_buf_get_lines(M.terminal_state.buf, 0, -1, false)
--   for _, line in ipairs(lines) do
--     if line ~= "" then
--       has_terminal = true
--       break
--     end
--   end
--
--   if not has_terminal then
--     vim.fn.termopen(os.getenv("SHELL"))
--   end
--
--   M.terminal_state.is_open = true
--   vim.cmd("startinsert")
--
--   -- Set up auto-close on buffer leave 
--   vim.api.nvim_create_autocmd("BufLeave", {
--     buffer = M.terminal_state.buf,
--     callback = function()
--       if M.terminal_state.is_open and vim.api.nvim_win_is_valid(M.terminal_state.win) then
--         vim.api.nvim_win_close(M.terminal_state.win, false)
--         M.terminal_state.is_open = false
--       end
--     end,
--     once = true
--   })
-- end
--
-- -- Function to explicitly close the terminal
-- function M.CloseFloatingTerminal()
--   if M.terminal_state.is_open and vim.api.nvim_win_is_valid(M.terminal_state.win) then
--     vim.api.nvim_win_close(M.terminal_state.win, false)
--     M.terminal_state.is_open = false
--   end
-- end
--
-- return M
--
